<?php

/**
 * @file
 * Block Content Revision UI hooks.
 */

use Drupal\block_content\BlockContentInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Form\RevisionRevertForm;
use Drupal\Core\Entity\Form\RevisionDeleteForm;
use Drupal\Core\Entity\Routing\RevisionHtmlRouteProvider;
use Drupal\Core\Session\AccountInterface;

/**
 * Implements hook_entity_type_alter().
 */
function block_content_revision_ui_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\ContentEntityType $blockContentDefinition */
  $blockContentDefinition = $entity_types['block_content'];

  // Route Providers.
  $handlers = $blockContentDefinition->getHandlerClasses();
  $routeProviders = isset($handlers['route_provider']) ? $handlers['route_provider'] : [];

  // Class is from https://www.drupal.org/project/drupal/issues/2350939.
  $class = RevisionHtmlRouteProvider::class;
  if (!in_array($class, $routeProviders)) {
    $routeProviders[] = $class;
    $blockContentDefinition->setHandlerClass('route_provider', $routeProviders);
  }

  // Link templates.
  if (FALSE === $blockContentDefinition->getLinkTemplate('revision')) {
    $blockContentDefinition->setLinkTemplate('revision', '/block/{block_content}/revision/{block_content_revision}/view');
  }
  if (FALSE === $blockContentDefinition->getLinkTemplate('version-history')) {
    $blockContentDefinition->setLinkTemplate('version-history', '/block/{block_content}/revisions');
  }
  if (FALSE === $blockContentDefinition->getLinkTemplate('revision-revert-form')) {
    $blockContentDefinition->setLinkTemplate('revision-revert-form', '/block/{block_content}/revision/{block_content_revision}/revert');
  }
  // @todo Also need to implement revision-delete-form per #2350939-96.
  if (NULL === $blockContentDefinition->getFormClass('revision-revert')) {
    // Class is from https://www.drupal.org/project/drupal/issues/2350939.
    $blockContentDefinition->setFormClass('revision-revert', RevisionRevertForm::class);
  }
  if (FALSE === $blockContentDefinition->getLinkTemplate('revision-delete-form')) {
    $blockContentDefinition->setLinkTemplate('revision-delete-form', '/block/{block_content}/revision/{block_content_revision}/delete');
  }
  if (NULL === $blockContentDefinition->getFormClass('revision-delete')) {
    $blockContentDefinition->setFormClass('revision-delete', RevisionDeleteForm::class);
  }
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function block_content_revision_ui_block_content_access(EntityInterface $entity, string $operation, AccountInterface $account): AccessResultInterface {
  assert($entity instanceof BlockContentInterface);

  $bundle = $entity->bundle();
  switch ($operation) {
    case 'view all revisions':
      return AccessResult::allowedIfHasPermissions($account, [
        'view any block_content history',
        'view block_content ' . $bundle . ' history'
      ], 'OR');

    case 'view revision':
      return AccessResult::allowedIfHasPermissions($account, [
        'view any block_content revisions',
        'view block_content ' . $bundle . ' revisions',
      ], 'OR');

    case 'revert':
      $allowRevertingCurrentRevision = (bool) \Drupal::configFactory()
        ->get('block_content_revision_ui.settings')
        ->get('allow_revert_current_revision');

      return
        AccessResult::allowedIfHasPermissions($account, [
        'revert any block_content revisions',
        'revert block_content ' . $bundle . ' revisions',
      ], 'OR')
        ->andIf(
          AccessResult::forbiddenIf(
            !$allowRevertingCurrentRevision &&
            $entity->isDefaultRevision() &&
            $entity->isLatestRevision()
          )->addCacheTags(['config:block_content_revision_ui.settings']),
        );

    case 'delete revision':
      return AccessResult::allowedIfHasPermissions($account, [
        'delete any block_content revisions',
        'delete block_content ' . $bundle . ' revisions',
      ], 'OR')->andIf(
        AccessResult::forbiddenIf($entity->isLatestRevision())
      );
  }

  return AccessResult::neutral();
}
